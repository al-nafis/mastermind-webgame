const Difficulty={BEGINNER:"Beginner",DEVELOPER:"Developer",ENGINEER:"Engineer"},Colors=["red","blue","green","yellow","white","black"],colorNotSet="colorNotSet",totalAttemptsLimit=10;class Game{constructor(e){this.difficultyLevel=e,this.totalMatch=0,this.attempt=1,this.codeMaker=function(){const t=[];let l=4;if(e==Difficulty.BEGINNER){const e=Colors.slice();for(let o=0;o<l;o++){let l=Math.floor(Math.random()*e.length);t.push(e[l]),e.splice(l,1)}}else{e==Difficulty.ENGINEER&&(l=6);for(let e=0;e<l;e++){let e=Math.floor(Math.random()*Colors.length);t.push(Colors[e])}}return t}(),this.currentCodeBreakerPattern=[]}getFeedback(){const e=[],t=this.codeMaker.slice(),l=this.currentCodeBreakerPattern.slice();for(let o=0;o<t.length;o++)t[o]==l[o]&&(e.push("black"),t[o]="parallelMatch",l[o]="parallelMatch");for(let o=0;o<t.length;o++)if("parallelMatch"!=t[o]&&"lineMatch"!=t[o])for(let r=0;r<l.length;r++)"parallelMatch"!=l[r]&&"lineMatch"!=l[r]&&t[o]==l[r]&&(e.push("white"),t[o]="lineMatch",l[r]="lineMatch");return console.log("Attempt: "+this.attempt),console.log("Code Maker: "+t),console.log("Code Breaker: "+l),console.log("Feedback: "+e),console.log("------------------------------"),e}isGameOver(){return this.totalMatch==this.codeMaker.length||this.attempt>=10}}