const Difficulty={BEGINNER:"Beginner",DEVELOPER:"Developer",ENGINEER:"Engineer"},Colors=["red","blue","green","yellow","white","black"],totalAttemptsLimit=10;class Game{constructor(t){this.difficultyLevel=t,this.totalMatch=0,this.attempt=1,this.codeMaker=function(){const e=[];let l=4;if(t==Difficulty.BEGINNER){const t=Colors.slice();for(let o=0;o<l;o++){let l=Math.floor(Math.random()*t.length);e.push(t[l]),t.splice(l,1)}}else{t==Difficulty.ENGINEER&&(l=6);for(let t=0;t<l;t++){let t=Math.floor(Math.random()*Colors.length);e.push(Colors[t])}}return e}(),this.currentCodeBreakerPattern=[],this.userWon=!1}getFeedback(){const t=[],e=this.codeMaker.slice(),l=this.currentCodeBreakerPattern.slice();this.totalMatch=0;for(let o=0;o<e.length;o++)e[o]==l[o]&&(t.push("black"),e[o]="parallelMatch",l[o]="parallelMatch",this.totalMatch++);for(let o=0;o<e.length;o++)if("parallelMatch"!=e[o]&&"lineMatch"!=e[o])for(let a=0;a<l.length;a++)"parallelMatch"!=l[a]&&"lineMatch"!=l[a]&&e[o]==l[a]&&(t.push("white"),e[o]="lineMatch",l[a]="lineMatch");return console.log("Attempt: "+this.attempt),console.log("Code Maker: "+e),console.log("Code Breaker: "+l),console.log("Feedback: "+t),console.log("------------------------------"),t}isGameOver(){return this.totalMatch==this.codeMaker.length?(this.userWon=!0,!0):this.attempt>=10}}